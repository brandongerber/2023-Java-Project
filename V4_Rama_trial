import java.io.*;
import javax.swing.JOptionPane;

public class JavaV4 {
    private static int score;

    public static void main(String[] args) {
        int highScore = readHighScore();

        JOptionPane.showMessageDialog(null, "Welcome to Who Wants to Be a Java Programmer?", "Welcome", JOptionPane.PLAIN_MESSAGE);

        String name = JOptionPane.showInputDialog("Please enter your name:");

        JOptionPane.showMessageDialog(null, "Hello, " + name + "!", "Introduction", JOptionPane.PLAIN_MESSAGE);

        int menu;
        String[] questions;
        String[] answerA;
        String[] answerB;
        String[] answerC;
        String[] answerD;
        String[] correctAnswers;

        // Read questions from file
        try {
            BufferedReader questionReader = new BufferedReader(new FileReader("questions.txt"));
            questions = new String[7];
            answerA = new String[7];
            answerB = new String[7];
            answerC = new String[7];
            answerD = new String[7];
            correctAnswers = new String[7];

            for (int i = 0; i < 7; i++) {
                questionReader.readLine(); // Skip the question number
                questions[i] = questionReader.readLine();
                answerA[i] = questionReader.readLine();
                answerB[i] = questionReader.readLine();
                answerC[i] = questionReader.readLine();
                answerD[i] = questionReader.readLine();
                questionReader.readLine(); // Skip the correct answer label
                correctAnswers[i] = questionReader.readLine(); // Read the correct answer
            }
            questionReader.close();
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        do {
            Object[] options = {"See Rules", "Start Test", "Exit"};

            do {
                menu = JOptionPane.showOptionDialog(null, "Main Menu:", "Menu", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
            } while (menu < 0 || menu > 2);

            switch (menu) {
                case 0:
                    showRules();
                    break;
                case 1:
                    score = 0;
                    startQuiz(name, questions, answerA, answerB, answerC, answerD, correctAnswers);
                    updateHighScore(highScore);
                    break;
                case 2:
                    JOptionPane.showMessageDialog(null, "Thank you for playing. Goodbye, " + name + "!", "Goodbye",
                            JOptionPane.PLAIN_MESSAGE);
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Invalid choice. Please choose a valid option (1/2/3).", "Error",
                            JOptionPane.ERROR_MESSAGE);
            }
        } while (menu != 2);
    }

    private static int readHighScore() {
        int highScore = 0;
        try {
            BufferedReader highScoreReader = new BufferedReader(new FileReader("highscore.txt"));
            highScore = Integer.parseInt(highScoreReader.readLine());
            highScoreReader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return highScore;
    }

    private static void showRules() {
        JOptionPane.showMessageDialog(null, "Rules of the test:\n" + "1. You will be tested on a set of 7 multiple-choice questions relating to Java.\n"
                        + "2. These questions relate to chapters one, two, and three.\n" + "3. Have fun!", "Rules", JOptionPane.INFORMATION_MESSAGE);
    }

    private static void startQuiz(String name, String[] questions, String[] answerA, String[] answerB, String[] answerC,
                                  String[] answerD, String[] correctAnswers) {
        for (int i = 0; i < 7; i++) {
            String answer = JOptionPane.showInputDialog("Question " + (i + 1) + ": " + questions[i] + "\n" +
                    "A) " + answerA[i] + "\nB) " + answerB[i] + "\nC) " + answerC[i] + "\nD) " + answerD[i] + "\nYour answer (A/B/C/D): ").toUpperCase();

            if (answer.equals(correctAnswers[i])) {
                score += 10;
                JOptionPane.showMessageDialog(null,
                        "Correct! You gained 10 points. Your current score: " + score, "Result", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Incorrect. The correct answer is " + correctAnswers[i] + ". Your current score: " + score,
                        "Result", JOptionPane.ERROR_MESSAGE);
            }
        }

        JOptionPane.showMessageDialog(null,
                "Thank you for playing, " + name + "!\nYour total score is: " + score, "Test Results", JOptionPane.INFORMATION_MESSAGE);
    }

    private static void updateHighScore(int highScore) {
        if (score > highScore) {
            try {
                BufferedWriter highScoreWriter = new BufferedWriter(new FileWriter("highscore.txt"));
                highScoreWriter.write(Integer.toString(score));
                highScoreWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
