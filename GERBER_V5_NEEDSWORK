/*STILL NEEDS PSEUDOCODE
 * STILL NEEDS DOCUMENTATION
 * STILL NEEDS TO BE FIXED, FILES WONT READ 
 * - BRANDON GERBER 11/14/2023
 */
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class JavaV5 {
    private static int score;
    private static int highScore;

    public static void main(String[] args) {
        createHighScoreFile();
        highScore = readInHighScore();

        JOptionPane.showMessageDialog(null, "Welcome to Who Wants to Be a Java Programmer?", "Welcome", JOptionPane.PLAIN_MESSAGE);
        String name = JOptionPane.showInputDialog("Please enter your name:");

        JOptionPane.showMessageDialog(null, "Hello, " + name + "!", "Introduction", JOptionPane.PLAIN_MESSAGE);

        boolean playAgain;
        do {
            playAgain = false;

            int choice;
            do {
                choice = displayMainMenu();
                switch (choice) {
                    case 1:
                        displayRules();
                        break;
                    case 2:
                        startTest(name);
                        break;
                    case 3:
                        JOptionPane.showMessageDialog(null, "Thank you for playing. Goodbye, " + name + "!",
                                "Goodbye", JOptionPane.PLAIN_MESSAGE);
                        System.exit(0);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Invalid choice. Please choose a valid option (1/2/3).",
                                "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (choice != 3);

            compareScore(highScore, score);
            displayScore(score);
        } while (playAgain);
    }

    public static int displayMainMenu() {
        Object[] options = {"See Rules", "Start Test", "Exit"};
        int choice;
        do {
            choice = JOptionPane.showOptionDialog(null, "Main Menu:", "Menu",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                    null, options, options[2]);
        } while (choice < 0 || choice > 2);

        return choice + 1;
    }

    public static void displayRules() {
        JOptionPane.showMessageDialog(null, "Rules of the test:\n" +
                "1. You will be tested on a set of 7 multiple-choice questions relating to Java.\n" +
                "2. These questions relate to chapters one, two, and three.\n" +
                "3. Have fun!", "Rules", JOptionPane.INFORMATION_MESSAGE);
    }

    public static int processQuestion(String question, String ansA, String ansB, String ansC, String ansD, char correctAns, int pointValue) {
        String userAnswer;
        do {
            StringBuilder optionsStr = new StringBuilder();
            optionsStr.append(ansA).append("\n");
            optionsStr.append(ansB).append("\n");
            optionsStr.append(ansC).append("\n");
            optionsStr.append(ansD).append("\n");
            userAnswer = JOptionPane.showInputDialog(question + "\n" + optionsStr + "Your answer (A/B/C/D): ").toUpperCase();
        } while (!userAnswer.equals("A") && !userAnswer.equals("B") && !userAnswer.equals("C") && !userAnswer.equals("D"));

        if (userAnswer.charAt(0) == correctAns) {
            score += pointValue;
            JOptionPane.showMessageDialog(null, "Correct! You gained " + pointValue + " points. Your current score: " + score, "Result", JOptionPane.INFORMATION_MESSAGE);
            return pointValue;
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect. The correct answer is " + correctAns + ". Your current score: " + score, "Result", JOptionPane.ERROR_MESSAGE);
            return 0;
        }
    }

    public static int readInHighScore() {
        try (BufferedReader reader = new BufferedReader(new FileReader("highscore.txt"))) {
            String line = reader.readLine();
            if (line != null) {
                return Integer.parseInt(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }

    public static void compareScore(int highScore, int userScore) {
        if (userScore > highScore) {
            updateHighScore(userScore);
            JOptionPane.showMessageDialog(null, "Congratulations, you've set a new high score! Your score: " + userScore, "High Score", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Thank you for playing. Your score: " + userScore + "\nHigh score: " + highScore, "Test Results", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public static void displayScore(int score) {
        JOptionPane.showMessageDialog(null, "Your current total score is: " + score, "Current Score", JOptionPane.INFORMATION_MESSAGE);
    }

    private static void createHighScoreFile() {
        try (FileWriter writer = new FileWriter("highscore.txt")) {
            writer.write("0");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void startTest(String name) {
        score = 0;

        // Read questions from a file
        ArrayList<QuestionData> questions = readQuestion("questions.txt");

        for (QuestionData questionData : questions) {
            int points = processQuestion(questionData.question, questionData.options[0], questionData.options[1], questionData.options[2], questionData.options[3], questionData.correctAnswer.charAt(0), questionData.pointValue);
            score += points;
            displayScore(score);
        }
    }

    private static ArrayList<QuestionData> readQuestion(String filename) {
        ArrayList<QuestionData> questions = new ArrayList<>();
        QuestionData currentQuestion = null;

        try (BufferedReader br = new BufferedReader(new FileReader("questions.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("#")) {
                    if (currentQuestion != null) {
                        questions.add(currentQuestion);
                    }
                    currentQuestion = new QuestionData(line.substring(1));
                } else if (currentQuestion != null) {
                    if (line.trim().matches("[A-Da-d]")) {
                        currentQuestion.correctAnswer = line.toUpperCase();
                    } else {
                        currentQuestion.addOption(line);
                    }
                }
            }
            if (currentQuestion != null) {
                questions.add(currentQuestion);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return questions;
    }

    private static class QuestionData {
        String question;
        String[] options = new String[4];
        String correctAnswer;
        int pointValue;

        public QuestionData(String question) {
            this.question = question;
        }

        public void addOption(String option) {
            for (int i = 0; i < options.length; i++) {
                if (options[i] == null) {
                    options[i] = option;
                    break;
                }
            }
        }
    }

    private static void updateHighScore(int newHighScore) {
        try (FileWriter writer = new FileWriter("highscore.txt")) {
            writer.write(Integer.toString(newHighScore));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
