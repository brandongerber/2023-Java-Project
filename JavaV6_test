/*
 startTest(name):

    // Declare arrays to store question data
    questionArray = array of strings with size 10
    answerA = array of strings with size 10
    answerB = array of strings with size 10
    answerC = array of strings with size 10
    answerD = array of strings with size 10
    correctAnswer = array of strings with size 10
    pointValue = array of integers with size 10

    // Read questions from a file and store in arrays
    readQuestion("/src/questions.txt", questionArray, answerA, answerB, answerC, answerD, correctAnswer, pointValue)

    // Process each question
    for i = 0 to 9:
        score += processQuestion(questionArray[i], answerA[i], answerB[i], answerC[i], answerD[i], correctAnswer[i])

    // Display the score after all questions are processed
    displayScore(score)

readQuestion(filename, questions, ansA, ansB, ansC, ansD, correctAns, pointValues):
    index = 0
    try:
        open file with filename for reading
        while (there are lines left in the file) and (index < 10):
            line = read a line from the file
            if line starts with "#":
                // Start of a new question
                questions[index] = substring of line from index 1
            else if line matches "[A-Da-d]":
                // Set correct answer
                correctAns[index] = uppercase of line
            else:
                // Add option to the current question
                switch (line):
                    case "A":
                        ansA[index] = read next line from the file
                        break
                    case "B":
                        ansB[index] = read next line from the file
                        break
                    case "C":
                        ansC[index] = read next line from the file
                        break
                    case "D":
                        ansD[index] = read next line from the file
                        break
                    case "Points":
                        pointValues[index] = parse next line as integer
                        break
                    default:
                        // Handle unexpected data or empty lines
                        break
            index = index + 1
    catch IOException:
        handle file reading error
        close the file
*/

import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class JavaGameV6 {
    private static int score;
    private static int highScore;

    private static final int ARRAY_SIZE = 10;
    private static String[] questionArray = new String[10];
    private static String[] answerA = new String[10];
    private static String[] answerB = new String[10];
    private static String[] answerC = new String[10];
    private static String[] answerD = new String[10];
    private static String[] correctAnswer = new String[10];
    private static int[] pointValue = new int[10];

    private static String[] highNames = new String[3];
    private static int[] highScores = new int[3];

    public static void main(String[] args) {
        // Initialization
        createHighScoreFile();
        highScore = readInHighScore();

        // Display welcome message and get player's name
        JOptionPane.showMessageDialog(null, "Welcome to Who Wants to Be a Java Programmer?", "Welcome", JOptionPane.PLAIN_MESSAGE);
        String name = JOptionPane.showInputDialog("Please enter your name:");

        // Greet the player
        JOptionPane.showMessageDialog(null, "Hello, " + name + "!", "Introduction", JOptionPane.PLAIN_MESSAGE);

        boolean playAgain;
        do {
            playAgain = false;

            int choice;
            do {
                // Display main menu and get user choice
                choice = displayMainMenu();

                // Switch based on user's choice
                switch (choice) {
                    case 1:
                        // Display the rules
                        displayRules();
                        break;
                    case 2:
                        // Start the test
                        startTest(name);
                        break;
                    case 3:
                        // Exit the game
                        JOptionPane.showMessageDialog(null, "Thank you for playing. Goodbye, " + name + "!",
                                "Goodbye", JOptionPane.PLAIN_MESSAGE);
                        System.exit(0);
                        break;
                    default:
                        // Display an error for invalid choice
                        JOptionPane.showMessageDialog(null, "Invalid choice. Please choose a valid option (1/2/3).",
                                "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (choice != 3);

            // Compare and display scores
            compareScore(highScore, score);
            displayScore(score);

            // Ask if the player wants to play again
            int playAgainOption = JOptionPane.showConfirmDialog(null, "Do you want to play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (playAgainOption == JOptionPane.YES_OPTION);
        } while (playAgain);
    }

    // Display main menu and get user choice
    public static int displayMainMenu() {
        Object[] options = {"See Rules", "Start Test", "Exit"};
        int choice;
        do {
            choice = JOptionPane.showOptionDialog(null, "Main Menu:", "Menu",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                    null, options, options[2]);
        } while (choice < 0 || choice > 2);

        return choice + 1;
    }

    // Display rules
    public static void displayRules() {
        JOptionPane.showMessageDialog(null, "Rules of the test:\n" +
                "1. You will be tested on a set of 8 multiple-choice questions relating to Java.\n" +
                "2. These questions relate to chapters one, two, three, four, and seven.\n" +
                "3. Have fun!", "Rules", JOptionPane.INFORMATION_MESSAGE);
    }

    // Process a question and update the score
    public static int processQuestion(String question, String ansA, String ansB, String ansC, String ansD, String correctAns) {
        int pointValue = 10; // Set pointValue to 10 for each question
        String userAnswer;
        do {
            // Display question and options, get user's answer
            StringBuilder optionsStr = new StringBuilder();
            optionsStr.append(ansA).append("\n");
            optionsStr.append(ansB).append("\n");
            optionsStr.append(ansC).append("\n");
            optionsStr.append(ansD).append("\n");
            userAnswer = JOptionPane.showInputDialog(question + "\n" + optionsStr + "Your answer (A/B/C/D): ").toUpperCase();
        } while (!userAnswer.equals("A") && !userAnswer.equals("B") && !userAnswer.equals("C") && !userAnswer.equals("D"));

        // Check if the answer is correct
        if (userAnswer.equals(correctAns)) {
            // Update score and display a correct message
            score += pointValue;
            JOptionPane.showMessageDialog(null, "Correct! You gained " + pointValue + " points. Your current score: " + score, "Result", JOptionPane.INFORMATION_MESSAGE);
            return pointValue;
        } else {
            // Display an incorrect message
            JOptionPane.showMessageDialog(null, "Incorrect. The correct answer is " + correctAns + ". Your current score: " + score, "Result", JOptionPane.ERROR_MESSAGE);
            return 0;
        }
    }

    // Read in the high score from a file
    public static int readInHighScore() {
        try (BufferedReader reader = new BufferedReader(new FileReader("highscore.txt"))) {
            for (int i = 0; i < 3; i++) {
                String line = reader.readLine();
                if (line != null) {
                    String[] parts = line.split(" ");
                    highNames[i] = parts[0];
                    highScores[i] = Integer.parseInt(parts[1]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }

    // Compare the user's score with the high score and update if necessary
    public static void compareScore(int highScore, int userScore) {
        for (int i = 0; i < 3; i++) {
            if (userScore > highScores[i]) {
                // Update arrays
                for (int j = 2; j > i; j--) {
                    highNames[j] = highNames[j - 1];
                    highScores[j] = highScores[j - 1];
                }
                // Insert new high score
                highNames[i] = JOptionPane.showInputDialog("Congratulations! You set a new high score. Enter your name:");
                highScores[i] = userScore;
                break;
            }
        }
        updateHighScoreFile();
    }

    // Display the user's current score
    public static void displayScore(int score) {
        JOptionPane.showMessageDialog(null, "Your current total score is: " + score, "Current Score", JOptionPane.INFORMATION_MESSAGE);
    }

    // Create a file for the high score if it doesn't exist
    private static void createHighScoreFile() {
        try (FileWriter writer = new FileWriter("highscore.txt")) {
            for (int i = 0; i < 3; i++) {
                writer.write("DefaultPlayer " + 0 + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Start the test by asking questions
    public static void startTest(String name) {
        score = 0;

        // Read in questions from a file
        readQuestion("/src/questions.txt");

        // Process each question
        for (int i = 0; i < ARRAY_SIZE; i++) {
            score += processQuestion(questionArray[i], answerA[i], answerB[i], answerC[i], answerD[i], correctAnswer[i]);
        }

        // Display the score after all questions are processed
        displayScore(score);
    }

    // Read questions from a file
 // Read questions from a file
    public static void readQuestion(String filename) {
        ArrayList<QuestionData> questions = new ArrayList<>();
        QuestionData currentQuestion = null;
        int questionIndex = 0;

        try (BufferedReader br = new BufferedReader(new FileReader("questions.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("#")) {
                    // Start of a new question
                    if (currentQuestion != null) {
                        // Add the previous question to the list
                        questions.add(currentQuestion);
                        questionIndex++;
                    }
                    // Create a new question
                    currentQuestion = new QuestionData(line.substring(1));
                    // Store data in parallel arrays
                    questionArray[questionIndex] = currentQuestion.question;
                } else if (currentQuestion != null) {
                    if (line.trim().matches("[A-Da-d]")) {
                        // Set correct answer
                        currentQuestion.correctAnswer = line.toUpperCase();
                        // Store correct answer in parallel array
                        correctAnswer[questionIndex] = currentQuestion.correctAnswer;
                    } else {
                        // Add option to the current question
                        currentQuestion.addOption(line);
                        // Store options in parallel arrays
                        answerA[questionIndex] = currentQuestion.options[0];
                        answerB[questionIndex] = currentQuestion.options[1];
                        answerC[questionIndex] = currentQuestion.options[2];
                        answerD[questionIndex] = currentQuestion.options[3];
                    }
                }
            }
            if (currentQuestion != null) {
                // Add the last question to the list
                questions.add(currentQuestion);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Class representing a question
    private static class QuestionData {
        String question;
        String[] options = new String[4];
        String correctAnswer;

        // Constructor to initialize a question with a prompt
        public QuestionData(String questionPrompt) {
            this.question = questionPrompt;
        }

        // Function to add an option to the question
        public void addOption(String option) {
            for (int i = 0; i < options.length; i++) {
                if (options[i] == null) {
                    options[i] = option;
                    break;
                }
            }
        }
    }

    // Update the high score in the file
    private static void updateHighScoreFile() {
        try (FileWriter writer = new FileWriter("highscore.txt")) {
            for (int i = 0; i < 3; i++) {
                writer.write(highNames[i] + " " + highScores[i] + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

	public static int[] getPointValue() {
		return pointValue;
	}

	public static void setPointValue(int[] pointValue) {
		JavaGameV6.pointValue = pointValue;
	}
}
